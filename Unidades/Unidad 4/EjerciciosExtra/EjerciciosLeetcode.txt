Problemas de Leetcode Resueltos Unidad 4:


100. Same Tree
Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.


public boolean isSameTree(TreeNode p, TreeNode q) {
        boolean flag = true;
        if(p==null && q==null)
         return flag;

       if((p!=null && q==null)||(p==null && q!=null)||(p.val!=q.val))
         return false;
        
        flag = isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
       
        return flag;
    }


Explicación:

Queremos  determinar si dos árboles binarios son idénticos, es decir, si tienen la misma estructura y los mismos valores en los nodos correspondientes

Caso Base: Ambos Nodos Nulos:

Si ambos nodos p y q son nulos, entonces los subárboles en estas posiciones son iguales, por lo tanto, retornamos true.

Caso Base: Uno de los Nodos es Nulo o Valores Diferentes:

Si uno de los nodos es nulo mientras que el otro no lo es, o si los valores de los nodos p y q son diferentes, entonces los subárboles no son iguales. En este caso, retornamos false

Recursión en Subárboles Izquierdo y Derecho:

La función llama recursivamente a sí misma para comparar los subárboles izquierdos (p.left y q.left) y los subárboles derechos (p.right y q.right).


Tiempo de ejecución O(n)

101. Symmetric Tree

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).


public boolean isSymmetric(TreeNode root) {

        if(root==null)return true;

        return compare(root.left,root.right);

    }
    Boolean compare(TreeNode left ,TreeNode right ){

        if(left==null && right==null)return true;
        if(left==null || right==null)return false;

        return left.val==right.val && compare(left.left,right.right)&& compare(left.right,right.left);
    }


Explicación:
verifica si un árbol binario es simétrico.

Función principal (isSymmetric):

Si la raíz es null, el árbol es simétrico y retornamos true.
Llama a la función auxiliar compare para comparar los subárboles izquierdo y derecho de la raíz.

Función auxiliar (compare):

Si ambos nodos (left y right) son null, retornamos true (son simétricos).
Si uno de los nodos es null y el otro no, retornamos false (no son simétricos).

Comparamos el valor de los nodos actuales y 
Llamamos recursivamente para comparar los subárboles: el izquierdo del left con el derecho del right, y el derecho del left con el izquierdo del right.


Tiempo de ejecución O(n)



104. Maximum Depth of Binary Tree

Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


 public int maxDepth(TreeNode root) {

        if(root==null)
        return 0;

        return 1+Math.max(maxDepth(root.left),maxDepth(root.right));
        
    }

Explicación:

Se pide calcular la profundidad máxima de un árbol binario.

Caso base:

Si el nodo raíz es null, el árbol está vacío y la profundidad es 0

Si el nodo raíz no es null, procedemos a calcular la profundidad máxima de los subárboles izquierdo y derecho de la raíz.

La llamada recursiva maxDepth(root.left) calcula la profundidad máxima del subárbol izquierdo.

La llamada recursiva maxDepth(root.right) calcula la profundidad máxima del subárbol derecho.


Una vez que se han calculado las profundidades máximas de los subárboles izquierdo y derecho, tomamos el máximo de estos dos valores usando Math.max(maxDepth(root.left), maxDepth(root.right)).
Se suma 1 al resultado para contar el nodo raíz actual en la profundidad. Este 1 representa el nivel actual en el árbol.

Tiempo de ejecución: O(n)



110. Balanced Binary Tree

Given a binary tree, determine if it is 
height-balanced

 public boolean isBalanced(TreeNode root) {
        if(root==null)return true;
        int lh = bpf(root.left);
        int rh = bpf(root.right);

        if(Math.abs(lh-rh)>1){
            return false;
        }

        return isBalanced(root.left) && isBalanced(root.right);
    }
    public int bpf(TreeNode root){
        if(root == null){
            return 0;
        }

        int lh = bpf(root.left);
        int rh = bpf(root.right);

        return 1+Math.max(lh,rh);
    }


Explicación:

Se pide determinar si un árbol binario está balanceado o no


Con el método isBalanced verificamos si un árbol binario está balanceado. Para ello, hacemos bpf para calcular la altura de cada subárbol.  después en 

isBalanced verificamos recursivamente que la diferencia de altura entre los subárboles izquierdo y derecho de cada nodo no sea mayor a 1, asegurando así que el árbol esté balanceado.


Tiempo de ejecución O(n al cuadrado) en el peor caso.
